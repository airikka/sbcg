#!/bin/bash

CONFIG_FILE=$(mktemp /tmp/sbgg.genconf.XXXXXXXXXX)
DATA_FILE_IDEAL=$(mktemp /tmp/sbgg.datafile.XXXXXXXXXX)
DATA_FILE_ACTUAL=$(mktemp /tmp/sbgg.datafile.XXXXXXXXXX)
RESULT_FILE=$(mktemp /tmp/sbgg.result.XXXXXXXXXX)

#Defaults
LANG="se"
TITLE="Burndown"
OUTPUT_TYPE="pdf enhanced"
OUTPUT="stdout-graph"
DAYS=20
ACTDAYS=0
HOURS=500
START_DATE="2013-01-01"
WITH_HD_WE="yes"
ACTUAL=""
CONFIG=""
DELTA=0
DELTA_REM=0

usage()
{
	echo "--blipp"
}

parse_config()
{
	for d in LANG TITLE OUTPUT_TYPE OUTPUT DAYS HOURS START_DATE WITH_HD_WE ACTUAL; do
		temp=$(cat $CONFIG | grep "^$d=" | sed -e 's/^.*=//' -e 's/\r//')
		eval $d="$temp"
	done
}

parse_arguments()
{
	while [ -n "$1" ]; do
		case "$1" in

			"--title")	shift
				if [ ! x"${1:0:2}" = x"--" ]; then
					TITLE=""
					while [ -n "$1" -a ! x"${1:0:2}" = x"--" ]; do
						TITLE_tmp=$(echo $TITLE $1)
						TITLE=$TITLE_tmp
						shift
					done
				fi
				;;
			"--type")	shift
				if [ ! x"${1:0:2}" = x"--" ]; then
					OUTPUT_TYPE=""
					while [ -n "$1" -a ! x"${1:0:2}" = x"--" ]; do
						OUTPUT_TYPE_tmp=$(echo $OUTPUT_TYPE $1)
						OUTPUT_TYPE=$OUTPUT_TYPE_tmp
						shift
					done
				fi
				;;
			"--work-days")	shift
				if [ ! x"${1:0:2}" = x"--" ]; then
					DAYS=$1
					shift
				fi
				;;
			"--start-date")	shift
				if [ ! x"${1:0:2}" = x"--" ]; then
					START_DATE=$1
					shift
				fi
				;;
			"--hours")	shift
				if [ ! x"${1:0:2}" = x"--" ]; then
					HOURS=$1
					shift
				fi
				;;
			"--with-hd-we")	shift
				if [ ! x"${1:0:2}" = x"--" ]; then
					WITH_HD_WE=$1
					shift
				fi
				;;
			"--lang")	shift
				if [ ! x"${1:0:2}" = x"--" ]; then
					LANG=$1
					shift
				fi
				;;
			"--output")	shift
				if [ ! x"${1:0:2}" = x"--" ]; then
					OUTPUT=$1
					shift
				fi
				;;
			"--config")	shift
				if [ ! x"${1:0:2}" = x"--" ]; then
					CONFIG=$1
					shift
				fi
				;;
			*) 		usage
				exit 42
				;;
		esac
	done
}


generate_gnuplot_config_file()
{
	END_DATE=$(date -d "$START_DATE + $ACTDAYS days" +"%Y-%m-%d")

	echo "set title \"$TITLE\"" >> $CONFIG_FILE
	echo "set term $OUTPUT_TYPE" >> $CONFIG_FILE
	echo "set output \"$RESULT_FILE\"" >> $CONFIG_FILE
	echo "set timefmt \"%Y-%m-%d\"" >> $CONFIG_FILE
	echo "set format x \"%Y-%m-%d\"" >> $CONFIG_FILE
	echo "set xtics rotate by -45 scale 0 font \",8\"" >> $CONFIG_FILE
	echo "set rmargin 6" >> $CONFIG_FILE
	echo "set bmargin 4" >> $CONFIG_FILE
	echo "set grid xtics ytics" >> $CONFIG_FILE
	echo "set key font \",6\"" >> $CONFIG_FILE

	if [ -n "$ACTUAL" ]; then

		linecounter=0
		while read d; do
			xval=$(echo $d | awk '{print $1}')
			yval=$(echo $d | awk '{print $2}')
			if [ -n "$yval" -a -n "$xval" ]; then
				echo "set label \"$yval\" at $linecounter,$yval font \",6\" left front offset 0.5" >> $CONFIG_FILE
				linecounter_tmp=$(expr $linecounter + 1)
				linecounter=$linecounter_tmp
			fi
		done < $DATA_FILE_ACTUAL

		echo "plot \"$DATA_FILE_IDEAL\" using 2:xticlabels(1) with lines title \"Ideal (Delta: $DELTA hours/day)\", \
			\"$DATA_FILE_ACTUAL\" using 2:xticlabels(1) with linespoints pt 7 ps 0.3 title \"Actual (Remaining delta: $DELTA_REM hours/day)\"" >> $CONFIG_FILE
	else
		echo "plot \"$DATA_FILE_IDEAL\" using 2:xticlabels(1) with lines title \"Ideal (Delta: $DELTA hours/day)\"" >> $CONFIG_FILE
	fi

}

calc_actual_days()
{
	COUNTER_HD_WE=0;
	COUNTUP=0
	LOOPNR=0

	while [ $COUNTUP -lt $DAYS ]; do
		CURDATE=$(date -d "$START_DATE + $LOOPNR days" +"%Y-%m-%d") 
		CURYR=$(date -d "$CURDATE" +"%Y")
		CURWDN=$(date -d "$CURDATE" +"%a")
		CURHOL=$(cat holidays/${LANG}/${CURYR} | grep $CURDATE)
		if [ x"$CURWDN" = x"Sat" -o x"$CURWDN" = x"Sun" -o -n "$CURHOL" ]; then
			COUNTER_HD_WE_tmp=$(expr $COUNTER_HD_WE + 1)
			COUNTER_HD_WE=$COUNTER_HD_WE_tmp
			LOOPNR_tmp=$(expr $LOOPNR + 1)
			LOOPNR=$LOOPNR_tmp
		else
			COUNTUP_tmp=$(expr $COUNTUP + 1)
			COUNTUP=$COUNTUP_tmp
			LOOPNR_tmp=$(expr $LOOPNR + 1)
			LOOPNR=$LOOPNR_tmp
		fi
	done

	echo $(expr $DAYS + $COUNTER_HD_WE)
}

generate_data_files()
{

	d_plus_one=0
	weekdays_plus_one=0
	CURHOUR=$HOURS
	DELTA=$(echo "scale=2; $HOURS / $DAYS" | bc)
	ACT_DAYS_REMAINING=0
	LAST_ACTUAL=0

	for d in $(seq 0 $(expr $ACTDAYS)); do
		CURDATE=$(date -d "$START_DATE + $d days" +"%Y-%m-%d") 
		CURWDN=$(date -d "$CURDATE" +"%a")
		CURYR=$(date -d "$CURDATE" +"%Y")
		CURHOL=$(cat holidays/${LANG}/${CURYR} | grep $CURDATE)

		if [ x"$CURWDN" = x"Sat" -o x"$CURWDN" = x"Sun" -o -n "$CURHOL" ]; then
			if [ x"$WITH_HD_WE" = x"yes" ]; then
				d_plus_one_tmp=$(expr $d_plus_one + 1)
				d_plus_one=$d_plus_one_tmp
				echo $CURDATE $CURHOUR >> $DATA_FILE_IDEAL
				echo $CURDATE $(echo $ACTUAL | awk "{print \$$d_plus_one}") >> $DATA_FILE_ACTUAL
			fi
		else
			d_plus_one_tmp=$(expr $d_plus_one + 1)
			d_plus_one=$d_plus_one_tmp
			weekdays_plus_one_tmp=$(expr $weekdays_plus_one + 1)
			weekdays_plus_one=$weekdays_plus_one_tmp

			echo $CURDATE $CURHOUR >> $DATA_FILE_IDEAL
			actual=$(echo $ACTUAL | awk "{print \$$d_plus_one}")
			echo $CURDATE $actual >> $DATA_FILE_ACTUAL
			CURHOUR=$(echo "scale=2; $HOURS - ($weekdays_plus_one * $DELTA)"| bc) 

			if [ x"$actual" = x"" ]; then
				ACT_DAYS_REMAINING_tmp=$(expr $ACT_DAYS_REMAINING + 1)
				ACT_DAYS_REMAINING=$ACT_DAYS_REMAINING_tmp
			else
				LAST_ACTUAL=$actual
			fi
		fi
	done

	if [ -n "$ACTUAL" ]; then
		DELTA_REM=$(echo "scale=2; $LAST_ACTUAL / $ACT_DAYS_REMAINING" | bc)
	fi

}

cleanup()
{
	rm $CONFIG_FILE $DATA_FILE_IDEAL $DATA_FILE_ACTUAL $RESULT_FILE
}

generate_config()
{
	echo -ne "LANG=\"$LANG\"\r\n" >> $RESULT_FILE
	echo -ne "TITLE=\"$TITLE\"\r\n" >> $RESULT_FILE
	echo -ne "OUTPUT_TYPE=\"$OUTPUT_TYPE\"\r\n" >> $RESULT_FILE
	echo -ne "OUTPUT=\"$OUTPUT\"\r\n" >> $RESULT_FILE
	echo -ne "DAYS=\"$DAYS\"\r\n" >> $RESULT_FILE
	echo -ne "HOURS=\"$HOURS\"\r\n" >> $RESULT_FILE
	echo -ne "START_DATE=\"$START_DATE\"\r\n" >> $RESULT_FILE
	echo -ne "WITH_HD_WE=\"$WITH_HD_WE\"\r\n" >> $RESULT_FILE
	if [ -n "$ACTUAL" ]; then
		echo -ne "ACTUAL=\"$ACTUAL\"\r\n" >> $RESULT_FILE
	else
		echo -ne "#Remove the hash and insert correct values into the space separated list below\r\n" >> $RESULT_FILE
		echo -ne "#ACTUAL=\"98 76 43 32 19 11\"\r\n" >> $RESULT_FILE
	fi
}

main()
{
	ACTDAYS=$(calc_actual_days)

	if [ x"$OUTPUT" = x"stdout-config" ]; then
		generate_config
	else
		generate_data_files
		generate_gnuplot_config_file
		gnuplot $CONFIG_FILE
	fi

	if [ x"$OUTPUT" = x"stdout-graph" -o x"$OUTPUT" = x"stdout-config" ]; then
		cat $RESULT_FILE
	else
		cp $RESULT_FILE $OUTPUT
	fi

	cleanup
}

parse_arguments $*

if [ -n "$CONFIG" ]; then
	parse_config
	#Parse arguments again, since we want them to override config file
	parse_arguments $*
fi

main
